A suggestion of project roadmap : 1- Begin by establishing a working client/server socket connection, 2- Then build on that : add the signals handling (CTRL+C, CTRL+D, CTRL+Z); 3- Only then begin the client registration system (NICK, USER, PASS), 4- The server commands (PING, OPER, KILL...) and 5- The channel operations commands (JOIN, PART, INVITE, KICK, PRIVMSG, NOTICE...).


Keep in mind that nc is very "minimalist" compared to irssi. That means that irssi will send you everything at once : the command, and the CRLF ending (\r\n). It will also append the : in some cases (for instance TOPIC #channel :message).

This is not the case with nc : you will have to concatenate the messages sent by the Client until you find the proper "end" (the CRLF). That means that you should have a (read) buffer ==for each client== connected to your server. Bonus: this will take care of he CTRL+D signal too! üòè

So now, if you follow us, you should guess that, for each client, you will need a (send) buffer as well! This will be very efficient in taking care of the CTRL+Z signal üòá . Don't forget to also check the POLLIN and POLLOUT revents in your server loop...



nc send message : "message ctrlv + ctrlm + enter"

COMMANDS :

- cap: functionality OK | replies OK						OK
- invite: functionality KO | replies KO						KO
- join: functionality GOOD START | replies GOOD START		KO
- kick: functionality KO | replies KO						KO
- message: functionality OK | replies GOOD START			KO
- mode: functionality KO | replies KO						KO
- nick: functionality OK | replies GOOD START				KO
- notice: functionality KO | replies KO						KO
- oper; functionality OK | replies GOOD START				KO
- part: functionality KO | replies KO						KO
- pass: functionality GOOD START | replies KO				KO
- ping: functionality OK | replies OK						OK
- quit: functionality KO | replies KO						KO
- topic: functionality KO | replies KO						KO
- user: functionality OK | replies OK						OK
